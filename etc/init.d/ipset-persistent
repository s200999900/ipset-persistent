#!/bin/sh

### BEGIN INIT INFO
# Provides:          ipset-persistent
# Required-Start:    mountkernfs $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Start-Before:    $network iptables-persistent
# X-Stop-After:      $network
# Short-Description: Load/Save ipset sets
# Description:       Load/Save ipset sets to /etc/ipset/*.set files. Look /etc/default/ipset-persistent for options.
### END INIT INFO

# Looks like not needed
# set -e

# Paths
DEFAULTS="/etc/default/ipset-persistent"
IPSET_BIN=""  # not defined by defaults
CONF_DIR="/etc/ipset"
CONF_NAME="sets"

# "defaults" default values - shouldn't be changed in this script
IP_SPLIT_CONFIG="yes"

# Including defaults if available
[ -r "$DEFAULTS" ] && . "$DEFAULTS"

# Including LSB functions
. /lib/lsb/init-functions

# Other stuff
rc=0

checks()
{
    # Checking for ipset binary
    if [ ! -z "$IPSET_BIN" ]; then
        if [ ! -f "$IPSET_BIN" ] || [ ! -x "$IPSET_BIN" ]; then
            log_failure_msg "Error: Command ipset is defined in $DEFAULTS, but not found or is not executable. Please fix or remove definition."
            rc=1
        fi
    fi
    if [ -z "$IPSET_BIN" ]; then
        if ! which ipset &>/dev/null; then
            log_failure_msg "Error: Command ipset not found in PATH - please define it in $DEFAULTS"
            rc=1
        else
            IPSET_BIN="ipset"
        fi
    fi

    /sbin/modprobe -q ip_set
    if [ $? -ne 0 ]; then
        echo "Error: ipset no kernel modules loaded"
    fi
    # Checking if directory for sets presents
    if [ ! -d "$CONF_DIR" ]; then
        log_failure_msg "Error: Directory '$CONF_DIR' doesn't exists - can't continue"
        rc=1
    fi
}

load_sets()
{
    log_action_begin_msg "Loading ipset sets"

    if [ "$IP_SPLIT_CONFIG" == "yes" ]; then
        $IPSET_BIN flush
        for filename in $CONF_DIR/*.set; do
            if [ -f "$filename" ]; then
                $IPSET_BIN restore -exist < "$filename"
                if [ $? -ne 0 ]; then
                    rc=1
                    log_action_cont_msg " $filename - FAILED"
                else
                    log_action_cont_msg " $filename loaded"
                fi
            fi
        done
    else
        $IPSET_BIN flush
        if [ -f "$CONF_DIR/$CONF_NAME" ]; then
            $IPSET_BIN restore -exist < "$CONF_DIR/$CONF_NAME"
            if [ $? -ne 0 ]; then
                rc=1
            fi
        else
            log_action_cont_msg " configuration $CONF_DIR/$CONF_NAME doesn'e exists - skipping"
        fi
    fi

    log_action_end_msg $rc
}

save_sets()
{
    log_action_begin_msg "Saving ipset sets"

    if [ "$IP_SPLIT_CONFIG" == "yes" ]; then
        for setname in `ipset list -n`; do
            $IPSET_BIN save $setname > "$CONF_DIR/$setname.set"
            if [ $? -ne 0 ]; then
                rc=1
                log_action_cont_msg " $setname - FAILED"
            else
                log_action_cont_msg " $setname saved"
            fi
        done
    else
        $IPSET_BIN save $setname > "$CONF_DIR/$CONF_NAME"
        if [ $? -ne 0 ]; then
            rc=1
        fi
    fi

    log_action_end_msg $rc
}

flush_sets()
{
    log_action_begin_msg "Flushing all sets"

    $IPSET_BIN flush
    $IPSET_BIN destroy
    if [ $? -ne 0 ]; then
        log_action_begin_msg "Error: Flush ipset rules failed $?"
        rc=1
    fi
    log_action_end_msg 0
}

case "$1" in
    start|restart|reload|force-reload)
        checks
        load_sets
        ;;
    save)
        checks
        save_sets
        ;;
    stop)
        checks
        flush_sets
        ;;
    *)
        checks
        log_success_msg "Usage: $0 {start|restart|reload|force-reload|save|stop}"
        rc=1
esac

exit $rc

# end of file
